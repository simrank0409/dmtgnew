window.addEventListener("DOMContentLoaded", function () { var t = window.Vue, e = window.URL || window.webkitURL, i = window.XMLHttpRequest, n = window.Compressor; new t({ el: "#app", data: function () { var t = this; return { options: { strict: !0, checkOrientation: !0, maxWidth: void 0, maxHeight: void 0, minWidth: 0, minHeight: 0, width: void 0, height: void 0, quality: .8, mimeType: "", convertSize: 5e6, success: function (i) { console.log("Output: ", i), e && (t.outputURL = e.createObjectURL(i)), t.output = i, t.$refs.input.value = "" }, error: function (t) { window.alert(t.message) } }, inputURL: "", outputURL: "", input: {}, output: {} } }, filters: { prettySize: function (t) { return t > 1048576 ? (t / 1048576).toFixed(2) + " MB" : t > 1024 ? (t / 1024).toFixed(2) + " KB" : t >= 0 ? t + " B" : "N/A" } }, methods: { compress: function (t) { t && (console.log("Input: ", t), e && (this.inputURL = e.createObjectURL(t)), this.input = t, new n(t, this.options)) }, change: function (t) { this.compress(t.target.files ? t.target.files[0] : null) }, dragover: function (t) { t.preventDefault() }, drop: function (t) { t.preventDefault(), this.compress(t.dataTransfer.files ? t.dataTransfer.files[0] : null) } }, watch: { options: { deep: !0, handler: function () { this.compress(this.input) } } }, mounted: function () { if (i) { var t = this, e = new i; e.onload = function () { var i = e.response, n = new Date; i.lastModified = n.getTime(), i.lastModifiedDate = n, i.name = "picture.jpg", t.compress(i) }, e.open("GET", "picture.jpg"), e.responseType = "blob", e.send() } } }) });